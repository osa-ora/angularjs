# This references the default nodejs container from
# the Docker Hub: https://registry.hub.docker.com/_/node/
# If you want Nodesource's container you would reference nodesource/node
# Read more about containers on our dev center
# http://devcenter.wercker.com/docs/containers/index.html
box: 
    id: httpd:2.4
    ports: 
        "8080"
# This is the build pipeline. Pipelines are the core of wercker
# Read more about pipelines on our dev center
# http://devcenter.wercker.com/docs/pipelines/index.html

# You can also use services such as databases. Read more on our dev center:
# http://devcenter.wercker.com/docs/services/index.html
# services:
    # - postgres
    # http://devcenter.wercker.com/docs/services/postgresql.html

    # - mongo
    # http://devcenter.wercker.com/docs/services/mongodb.html
#
# one special pipeline called dev, which will only be executed 
# when running it with the CLI using the wercker dev command.
#
dev:
  steps:
    - npm-install
    - internal/watch:
        code: node app.js
        reload: true
#
build:
  # The steps that will be executed on build
  # Steps make up the actions in your pipeline
  # Read more about steps on our dev center:
  # http://devcenter.wercker.com/docs/steps/index.html
  steps:
    # A custom script step, name value is used in the UI
    # and the code value contains the command that get executed
    - script:
        name: Configure AnglyarJS application
        code: |
          echo "Start building the app"
          ls -l
          mkdir -p ./usr/local/apache2/htdocs/demo/
          mkdir -p ./usr/local/apache2/conf/
          cp -R ./httpd.conf ./usr/local/apache2/conf/httpd.conf
          rm ./httpd.conf
          echo "First :)"
          cp -R * ./usr/local/apache2/htdocs/demo/
          rm -rf WebContent
          echo "Second :)"
          chown -R www-data:www-data ./usr/local/apache2/htdocs/demo
          chmod -R ugo+rx ./usr/local/apache2/htdocs/demo
          ls -l
          ls -l ./usr/local/apache2/htdocs/demo
          ls -l ./usr/local/apache2/conf
          echo "Done :)"
#
#
#
#
release-build:
  steps:
    - script:
        name: setup node env
        code: |
          export NODE_ENV=development

    # Generate relevant artifacts
    - script:
        name: build release code
        code: |
          ls -l
          ls -l ./usr/local/apache2/htdocs/demo
          ls -l ./usr/local/apache2/conf
          echo "Done :)"
#
#
#
push-release:
  steps:
    - script:
        name: push release
        code: |
          ls -l
          ls -l ./usr/local/apache2/htdocs/demo
          ls -l ./usr/local/apache2/conf
          echo "Done :)"
          echo "in release step"
    # push container as-is
    - internal/docker-push:
        disable-sync: true
        repository: osaora/angular_js
        username: $DOCKER_USERNAME
        password: $DOCKER_PASSWORD
        tag: "FirstOne"
